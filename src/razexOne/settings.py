"""
Django settings for razexOne project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import environ
import os
from .secrets import SecretManager, AWSSecretsManager


# Load environment variables
env = environ.Env(DEBUG=(bool, False))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # Represents src/ directory.
PROJECT_ROOT = os.path.join(
    BASE_DIR, ".."
)  # Represents the root directory of the repository.


# SECURITY WARNING: don't run with debug turned on in production!
# Read the .env file
environ.Env.read_env(os.path.join(PROJECT_ROOT, ".env"))

AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID", default=None)
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY", default=None)
AWS_S3_REGION_NAME = env("AWS_REGION_NAME", default="us-east-1")

# Initialize the SecretManager
USE_AWS_SECRETS_MANAGER = env.bool("USE_AWS_SECRETS_MANAGER", default=False)

aws_secrets_manager = None
if USE_AWS_SECRETS_MANAGER:
    aws_secrets_manager = AWSSecretsManager(
        region_name=AWS_S3_REGION_NAME,
        access_key=AWS_ACCESS_KEY_ID,
        secret_key=AWS_SECRET_ACCESS_KEY,
    )
secret_manager = SecretManager(aws_secrets_manager=aws_secrets_manager, env=env)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Raises Django's ImproperlyConfigured
# exception if SECRET_KEY not in os.environ
SECRET_KEY = secret_manager.get_secret("SECRET_KEY")

DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list(
    "ALLOWED_HOSTS", default=["*", "localhost", "127.0.0.1", "44.217.245.84", "ec2-44-217-245-84.compute-1.amazonaws.com"] if DEBUG else ["44.217.245.84", "ec2-44-217-245-84.compute-1.amazonaws.com"]
)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    "django.contrib.auth",
    "django.contrib.contenttypes",
    'django.contrib.sessions',
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_filters",
    "base",
    "booking",
    "drf_yasg",
]

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "base.auth.FirebaseAuthentication",
        "base.auth.OTPAuthentication",
        "base.auth.NativeAuthentication",
    ],
    "PAGE_SIZE": 100,
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "razexOne.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "razexOne.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
# Parse database connection url strings
# like psql://user:pass@127.0.0.1:8458/db

DATABASES = {
    "default": env.db("DATABASE_URL")
}

# Hack to load the database config from the environment variable


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

ACTIVE_AUTH_BACKENDS = ("native", "firebase", "otp")

AUTH_USER_MODEL = "base.User"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "base.auth.DjangoProxyBackend",
]

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "JWT Token": {
            "type": "apiKey",
            "name": "Jwt",
            "in": "header",
        },
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"},
    },
    "PERSIST_AUTH": True,
    "DEFAULTS": {
        "schemes": ["https", "http"],
    },
}

FIREBASE_SERVICE_ACCOUNT_KEY_PATH = env(
    "FIREBASE_SERVICE_ACCOUNT_KEY_PATH", default=None
)

FIREBASE_SERVICE_ACCOUNT_KEY_JSON = secret_manager.get_secret(
    "FIREBASE_SERVICE_ACCOUNT_KEY_JSON"
)

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True  # Ensures the correct domain is used in the request

RAZORPAY_API_KEY = secret_manager.get_secret("RAZORPAY_API_KEY")
RAZORPAY_API_SECRET = secret_manager.get_secret("RAZORPAY_API_SECRET")
RAZORPAY_WEBHOOK_SECRET = secret_manager.get_secret("RAZORPAY_WEBHOOK_SECRET")
RAZORPAY_ACCOUNT_NUMBER = secret_manager.get_secret("RAZORPAY_ACCOUNT_NUMBER")

ACTIVE_PAYMENT_GATEWAY = "razorpay"  # Hardcoded for now
WALLET_PAYMENT_GATEWAY = "wallet"

PAYOUT_EXPIRY_IN_SECS = 60 * 60 * 24 * 3  # 3 days

TAX_RATE = 0.18  # 18%
PLATFORM_FEE = 20  # 20 INR

MIN_WALLET_RECHARGE = 100
MAX_WALLET_RECHARGE = 100000

_sample_terms_and_conditions = """
GENERAL TERMS & CONDITIONS

Definitions :

- "Event" means the event in which the Event Manager has been engaged by your company to plan and organize;
- "Event Date" means the date of the Event;
- "Event Manager/ Planner" means Events Wizard Sdn Bhd or Elysium Weddings Sdn Bhd;
- "Fees" means the fees agreed upon between the Event Manager and You as set out in the relevant quotation;
- "Your company / You" means the client who is engaging the Event Manager for the Event.;

Terms & Conditions :

1. Terms of Payment: Fees shall be agreed as stated in the relevant quotation.
"""

EVENT_TAC = env("EVENT_TAC", default=_sample_terms_and_conditions)

# S3 Storage Settings

AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME", default="razexone")
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

# Use S3 for media storage
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

# Public Media Settings (for public images)
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",  # 24 hours
}

# Private Media (for restricted images)
PRIVATE_MEDIA_LOCATION = "private"
PUBLIC_MEDIA_LOCATION = "media"


# OTP Configuration
OTP_EXPIRY_AFTER_MINUTES = 5  # OTP will expire after 5 minutes
OTP_SEND_INTERVAL_SECONDS = 60  # User can request OTP every 60 seconds
